#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "C:\Users\awest\Workspaces\RetireSimple\RetireSimple.Engine\bin\Debug\net6.0\RetireSimple.Engine.dll" // This is the assembly I want to load
#r nuget:Microsoft.EntityFrameworkCore.Relational
#r nuget:Microsoft.EntityFrameworkCore
#r nuget:MathNet.Numerics

#!csharp

var loadedAssemblies = System.AppDomain.CurrentDomain.GetAssemblies();
foreach (var assembly in loadedAssemblies)
{
	Console.WriteLine(assembly.FullName);
}

#!csharp

using RetireSimple.Engine.Data;
var investmentModules = ReflectionUtils.GetInvestmentModules();
foreach (var investmentModule in investmentModules)
{
	Console.WriteLine(investmentModule);
}

foreach(var module in investmentModules){
	var analysisModules = ReflectionUtils.GetAnalysisModules(module);
	foreach(var analysisModule in analysisModules){
		Console.WriteLine("\t"+analysisModule);
	}
}

#!csharp

using RetireSimple.Engine.Data.Investment;

var stonkAnalysisModules = ReflectionUtils.GetAnalysisModules("StockInvestment");

var analysisModuleField = typeof(StockInvestment).GetProperty("AnalysisMethod");
Console.WriteLine($"Analsis method Property: {analysisModuleField.Name}, {analysisModuleField.PropertyType}");

var investmentModuleAttr = typeof(StockInvestment).GetCustomAttributes(typeof(InvestmentModuleAttribute), false)[0] as InvestmentModuleAttribute;
var attrResolvedProp = typeof(StockInvestment).GetProperty(investmentModuleAttr.AnalysisModuleField);
Console.WriteLine($"InvestmentModuleAttribute: {investmentModuleAttr.AnalysisModuleField}, {attrResolvedProp.PropertyType}");


// var testInvestment = new StockInvestment("");

//Test Values
// testInvestment.StockQuantity = 100;
// testInvestment.StockPrice = 100;
// testInvestment.StockDividendPercent = 0.01M;
// testInvestment.StockPurchaseDate = DateOnly.FromDateTime(DateTime.Now.AddYears(-1));
// testInvestment.StockDividendDistributionMethod = "Stock";
// testInvestment.StockDividendDistributionInterval = "Month";
// testInvestment.StockDividendFirstPaymentDate = DateOnly.FromDateTime(DateTime.Now.AddMonths(-1));
// testInvestment.AnalysisOptionsOverrides = new Dictionary<string, string>(){
// 	["AnalysisLength"] = "60",                          //Number of months to project
// 	["RandomVariableMu"] = "0",
// 	["RandomVariableSigma"] = "1",
// 	["RandomVariableScaleFactor"] = "1",
// 	["SimCount"] = "1000"
// };


// if(testInvestment.AnalysisMethod is null){
// 	Console.WriteLine("No analysis method, trying to assign method");

// 	var testDelegate = (AnalysisModule<StockInvestment>) stonkAnalysisModules.First();
// 	testInvestment.AnalysisMethod = testDelegate;

// 	Console.WriteLine("Analysis method assigned, invoking...");
// 	var testModel = testInvestment.InvokeAnalysis(new Dictionary<string,string>());

// 	Console.WriteLine("Analysis method invoked, printing Average results...");
// 	foreach(var value in testModel.AvgModelData)
// 	{
// 		Console.WriteLine(value);
// 	}
// }
